{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Build a single-node Splunk server in a VPC.",

  "Parameters" : {

    "Owner" : {
      "Description" : "Name of the owner for the splunk environment",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "SplunkAdminPassword" : {
      "Description" : "Password for splunk admin access",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64"
    },

    "SplunkVersion" : {
      "Description" : "Version number of splunk server",
      "Type" : "String",
      "Default" : "6.2.2",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[.0-9]*",
      "ConstraintDescription" : "can contain only numeric characters and dots."
    },
    
    "SplunkBuildnum" : {
      "Description" : "Build number of splunk server",
      "Type" : "String",
      "Default" : "255606",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[0-9]*",
      "ConstraintDescription" : "can contain only numeric characters."
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the splunk server",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "SSHFrom" : {
      "Description": "Lockdown SSH access to Bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "CIDRBlock" : {
      "Description": "Restrict incoming data from specified IP range (default can be received from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    
    "InstanceType" : {
      "Description" : "Splunk Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "c3.large", "c3.xlarge" ]
    },

    "ServerName" : {
      "Description" : "[Optional] ServerName to use for new DNS records for splunk server (without trailing dot). For example: ServerName(=splunk).Subdomain(=stg).HostedZoneName(=qa.tmicss.net) = splunk.stg.qa.tmicss.net",
      "Type" : "String",
      "MinLength": "0",
      "MaxLength": "255",
      "Default": "splunk-index",
      "AllowedPattern" : "[-_a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, and dashes and underscores."
    },

    "Subdomain" : {
      "Description" : "[Optional] Subdomain to use for new DNS records for splunk server (without trailing dot). For example: ServerName(=splunk).Subdomain(=stg).HostedZoneName(=qa.tmicss.net) = splunk.stg.qa.tmicss.net",
      "Type" : "String",
      "MinLength": "0",
      "MaxLength": "255",
      "AllowedPattern" : "[-_a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, and dashes and underscores."
    },

    "HostedZoneName" : {
      "Description" : "[Optional] Hosted zone name e.g. 'example.com' (without trailing dot) - Route 53 must be the DNS service for specified domain",
      "Type" : "String",
      "AllowedPattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][-A-Za-z0-9]*[A-Za-z0-9])?$",
      "ConstraintDescription": "Must be a valid DNS domain."
    }
  },

  "Mappings" : {

     "AWSRegionArch2AMI" : {
       "us-east-1"      : { "64" : "ami-1ecae776" },
       "us-west-1"      : { "64" : "ami-d114f295" },
       "us-west-2"      : { "64" : "ami-e7527ed7" },
       "eu-west-1"      : { "64" : "ami-a10897d6" },
       "eu-central-1"   : { "64" : "ami-a8221fb5" },
       "sa-east-1"      : { "64" : "ami-b52890a8" },
       "ap-southeast-1" : { "64" : "ami-68d8e93a" },
       "ap-southeast-2" : { "64" : "ami-fd9cecc7" },
       "ap-northeast-1" : { "64" : "ami-cbf90ecb" }
     }
  },

  "Conditions" : {
    "SubdomainEmpty" : { "Fn::Equals" : [{ "Ref": "Subdomain" }, ""]},
    "AddDNSRecords" : { "Fn::Not" : [
      { "Fn::Equals" : [{ "Ref": "HostedZoneName" }, ""]}
    ]}
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "192.168.0.0/16",
        "EnableDnsSupport" : true,
        "EnableDnsHostnames" : true,
        "Tags" : [
          {"Key" : "Name", "Value" : { "Ref" : "AWS::StackName"} },
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "192.168.1.0/24",
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    
    "SplunkDefaultSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable internal access for SSH and Splunk management/replication, and allow public access to Splunk web & receiver",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref": "SSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "8317", "ToPort" : "8317", "CidrIp" : { "Ref": "CIDRBlock" } },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref": "CIDRBlock" } },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref": "CIDRBlock" } }
        ]
      }
    },

    "SplunkServer" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "python27-boto" : []
              }
            },
            "files" : {
                "/opt/splunk/etc/system/local/inputs.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[splunktcp]\n",
                  "[splunktcp://8317]\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/opt/splunk/etc/system/local/web.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[settings]\n",
                  "startwebserver = 1\n",
                  "httpport = 443\n",
                  "enableSplunkWebSSL = 1\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "64" ]},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [ { "Ref" : "SplunkDefaultSecurityGroup" } ],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet" }
        }],
        "KeyName" : { "Ref" : "KeyName" },
        "Tags": [
           { "Key" : "Name", "Value": "Splunk-Standalone-Server" },
           { "Key" : "Role", "Value": "SplunkServer" },
           { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
           { "Key" : "Owner", "Value" : { "Ref": "Owner" } },
           { "Key" : "Keep", "Value" : "Yes" }
        ],
        "UserData": {
          "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -v\n",

                "yum update -y aws-cfn-bootstrap\n",
                
                "wget ", { "Fn::Join" : ["", ["http://download.splunk.com/products/splunk/releases/" , { "Ref" : "SplunkVersion" }, "/splunk/linux/splunk-", { "Ref": "SplunkVersion" }, "-", { "Ref": "SplunkBuildnum" }, "-linux-2.6-x86_64.rpm"]]}, " -O /tmp/splunk_server.rpm\n",
                "rpm -ivh /tmp/splunk_server.rpm --force\n",

                "/opt/splunk/bin/splunk start --accept-license --answer-yes\n",
                "/opt/splunk/bin/splunk enable boot-start\n",
                "/opt/splunk/bin/splunk edit user admin -password ", { "Ref": "SplunkAdminPassword" }, " -role admin -auth admin:changeme\n",
                
                "#helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r SplunkServer ",
                "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                "/opt/splunk/bin/splunk restart\n",
                
                "#all is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"Splunk server setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
              ]
            ]
          }
        }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "SplunkServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "900"
      }
    },
    
    "SplunkServerDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition": "AddDNSRecords",
      "Properties" : {
        "HostedZoneName" : {
          "Fn::Join" : [ "", [
            {"Ref" : "HostedZoneName"}, "."
          ] ]
        },
        "Comment" : "DNS name for Splunk Server.",
        "Name" : {
          "Fn::Join" : [ "", [
            { "Ref" : "ServerName" }, ".",
            {"Ref" : "Subdomain"},
            {"Fn::If" : [ "SubdomainEmpty", "", "." ]},
            {"Ref" : "HostedZoneName"},
            "."
          ] ]
        },
        "Type" : "A",
        "TTL" : "60",
        "ResourceRecords" : [
          { "Fn::GetAtt" : [ "SplunkServer", "PublicIp" ] }
        ]
      }
    }
  },
  

  "Outputs" : {
    "SplunkServerURL" : {
      "Condition": "AddDNSRecords",
      "Value" : { "Fn::Join" : [ "", [
        "https://",
        {"Ref" : "SplunkServerDNSRecord"}
      ]]},
      "Description" : "Splunk Server URL"
    },

    "VpcID" : {
      "Value" : { "Ref": "VPC" },
      "Description" : "VPC ID of newly created VPC"
    },

    "PublicSubnetID" :  {
      "Value" : { "Ref": "PublicSubnet" },
      "Description" : "Public subnet ID"
    },

    "PublicDnsName" : {
      "Value" : {"Fn::GetAtt" : [ "SplunkServer", "PublicDnsName" ]},
      "Description" : "Public DNS name of instance"
    },

    "PrivateIp" : {
      "Value" : {"Fn::GetAtt" : [ "SplunkServer", "PrivateIp" ]},
      "Description" : "Private IP address of instance"
    },

    "PublicIp" : {
      "Value" : {"Fn::GetAtt" : [ "SplunkServer", "PublicIp" ]},
      "Description" : "Public IP address of instance"
    }
  }
}
